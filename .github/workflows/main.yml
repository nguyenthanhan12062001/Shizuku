name: Shizuku CI

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Verify submodules
      run: |
        echo "Submodules status:"
        git submodule status
        echo ""
        echo "Contents of submodules directory:"
        ls -la | grep -E "(submodule|\.git)" || true

    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew build --no-daemon

    - name: Run tests
      run: ./gradlew test --no-daemon

    - name: Lint check
      run: ./gradlew lintDebug --no-daemon

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: shizuku-build-output
        path: |
          app/build/outputs/apk/
          app/build/outputs/mapping/
        retention-days: 7

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build release APK
      run: |
        chmod +x gradlew
        ./gradlew assembleRelease --no-daemon

    - name: Sign APK (if signing config available)
      env:
        KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [ -n "$KEYSTORE_FILE" ]; then
          echo "Signing APK with provided keystore"
          ./gradlew assembleRelease
        else
          echo "No signing config found, building unsigned APK"
        fi

    - name: Upload release APK
      uses: actions/upload-artifact@v3
      with:
        name: shizuku-release-apk
        path: app/build/outputs/apk/release/
        retention-days: 7

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: app/build/outputs/apk/release/*.apk
        generate_release_notes: true

  deploy-demo:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build debug APK
      run: |
        chmod +x gradlew
        ./gradlew assembleDebug --no-daemon

    - name: Upload debug APK to transfer.sh
      run: |
        APK_FILE=$(find app/build/outputs/apk/debug -name "*.apk" | head -n 1)
        if [ -n "$APK_FILE" ]; then
          DOWNLOAD_URL=$(curl --upload-file "$APK_FILE" "https://transfer.sh/$(basename "$APK_FILE")")
          echo "APK uploaded to: $DOWNLOAD_URL"
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
        else
          echo "No APK file found!"
          exit 1
        fi
